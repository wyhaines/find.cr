crystal_doc_search_index_callback({"repository_name":"find","body":"![SplayTreeMap CI](https://img.shields.io/github/workflow/status/wyhaines/find.cr/Find.cr%20CI?style=for-the-badge&logo=GitHub)\n[![GitHub release](https://img.shields.io/github/release/wyhaines/find.cr.svg?style=for-the-badge)](https://github.com/wyhaines/find.cr/releases)\n![GitHub commits since latest release (by SemVer)](https://img.shields.io/github/commits-since/wyhaines/find.cr/latest?style=for-the-badge)\n\n# find.cr\n\nThis shard is inspired by the Ruby module:\n\nhttps://ruby-doc.org/stdlib-2.7.2/libdoc/find/rdoc/index.html\n\nIt implements a simple API for the top down traversal of a set of paths, and it provides a convenience method for a simple-to-use matching system that depends on Crystal's file matching syntax.\n\n## Installation\n\n1. Add the dependency to your `shard.yml`:\n\n   ```yaml\n   dependencies:\n     find:\n       github: wyhaines/find.cr\n   ```\n\n## Usage\n\n```crystal\nrequire \"find\"\n```\n\nThe API is simple.\n\n```crystal\nrequire 'find'\n\ntotal_size = 0\n\nFind.find(ENV[\"HOME\"]) do |path|\n  if File.directory?(path)\n    if File.basename(path).start_with?('.')\n      Find.prune       # Don't look any further into this directory.\n    else\n      next\n    end\n  end\n\n  total_size += FileTest.size(path)\nend\n```\n\n![GitHub code size in bytes](https://img.shields.io/github/languages/code-size/wyhaines/find.cr?style=for-the-badge)\n![GitHub issues](https://img.shields.io/github/issues/wyhaines/find.cr?style=for-the-badge)","program":{"html_id":"find/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"locations":[],"repository_name":"find","program":true,"enum":false,"alias":false,"const":false,"types":[{"html_id":"find/Find","path":"Find.html","kind":"class","full_name":"Find","name":"Find","abstract":false,"superclass":{"html_id":"find/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"find/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"find/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"find/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/find.cr","line_number":1,"url":null},{"filename":"src/version.cr","line_number":1,"url":null}],"repository_name":"find","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"VERSION","name":"VERSION","value":"\"2.0.0\""}],"included_modules":[{"html_id":"find/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"}],"class_methods":[{"html_id":"find(*paths,&)-class-method","name":"find","doc":"For ruby compatibility\n\n* Skips dangling symlinks","summary":"<p>For ruby compatibility</p>","abstract":false,"args":[{"name":"paths","external_name":"paths","restriction":""}],"args_string":"(*paths, &)","args_html":"(*paths, &)","location":{"filename":"src/find.cr","line_number":15,"url":null},"def":{"name":"find","args":[{"name":"paths","external_name":"paths","restriction":""}],"splat_index":0,"yields":1,"visibility":"Public","body":"paths = paths.compact_map do |path|\n  Path[path]\nend\n(new(paths)).each do |path, info|\n  exists = begin\n    File.exists?(path)\n  rescue\n    false\n  end\n  if exists\n    yield(path.to_s)\n  end\nend\n"}}],"constructors":[{"html_id":"new(paths:Enumerable(String?))-class-method","name":"new","abstract":false,"args":[{"name":"paths","external_name":"paths","restriction":"Enumerable(String | ::Nil)"}],"args_string":"(paths : Enumerable(String?))","args_html":"(paths : Enumerable(String?))","location":{"filename":"src/find.cr","line_number":28,"url":null},"def":{"name":"new","args":[{"name":"paths","external_name":"paths","restriction":"Enumerable(String | ::Nil)"}],"visibility":"Public","body":"new(paths.compact_map do |path|\n  Path.new(path)\nend)"}},{"html_id":"new(paths:Enumerable(Path))-class-method","name":"new","abstract":false,"args":[{"name":"paths","external_name":"paths","restriction":"Enumerable(Path)"}],"args_string":"(paths : Enumerable(Path))","args_html":"(paths : Enumerable(Path))","location":{"filename":"src/find.cr","line_number":32,"url":null},"def":{"name":"new","args":[{"name":"paths","external_name":"paths","restriction":"Enumerable(Path)"}],"visibility":"Public","body":"_ = allocate\n_.initialize(paths)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(*paths)-class-method","name":"new","abstract":false,"args":[{"name":"paths","external_name":"paths","restriction":""}],"args_string":"(*paths)","args_html":"(*paths)","location":{"filename":"src/find.cr","line_number":24,"url":null},"def":{"name":"new","args":[{"name":"paths","external_name":"paths","restriction":""}],"splat_index":0,"visibility":"Public","body":"new(paths.compact_map do |path|\n  Path[path]\nend)"}}],"instance_methods":[{"html_id":"each(&)-instance-method","name":"each","doc":"Must yield this collection's elements to the block.","summary":"<p>Must yield this collection's elements to the block.</p>","abstract":false,"location":{"filename":"src/find.cr","line_number":35,"url":null},"def":{"name":"each","yields":1,"visibility":"Public","body":"search_path = [] of Path\n@paths.each do |path|\n  search_path << path\n  while !search_path.empty?\n    file = search_path.pop\n    info = File.info?(file, follow_symlinks: false)\n    if info\n    else\n      next\n    end\n    skip = yield({file.not_nil!, info.not_nil!})\n    if skip == Find::Skip\n      next\n    end\n    if info.directory?\n      begin\n        fs = Dir.open(file) do |dir|\n          {% if Dir.has_method?(:info) %} # Crystal >= 1.5.0?\n                dinfo = dir.info\n                raise RaceError.new unless dinfo.same_file?(info)\n              {% end %}\n          dir.children\n        end\n      rescue ex\n        dir_children_error(file, ex)\n        next\n      end\n      fs.sort.reverse!.each do |f|\n        search_path.push(file.join(f))\n      end\n    end\n  end\nend\n"}}],"macros":[{"html_id":"prune-macro","name":"prune","abstract":false,"location":{"filename":"src/find.cr","line_number":6,"url":null},"def":{"name":"prune","visibility":"Public","body":"    next Find::Skip\n  "}}],"types":[{"html_id":"find/Find/RaceError","path":"Find/RaceError.html","kind":"class","full_name":"Find::RaceError","name":"RaceError","abstract":false,"superclass":{"html_id":"find/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"find/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"find/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"find/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/find.cr","line_number":10,"url":null}],"repository_name":"find","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"find/Find","kind":"class","full_name":"Find","name":"Find"}},{"html_id":"find/Find/Skip","path":"Find/Skip.html","kind":"struct","full_name":"Find::Skip","name":"Skip","abstract":false,"superclass":{"html_id":"find/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"find/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"find/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"find/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/find.cr","line_number":4,"url":null}],"repository_name":"find","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"find/Find","kind":"class","full_name":"Find","name":"Find"},"constructors":[{"html_id":"new-class-method","name":"new","abstract":false,"location":{"filename":"src/find.cr","line_number":4,"url":null},"def":{"name":"new","visibility":"Public","body":"x = allocate\nif x.responds_to?(:finalize)\n  ::GC.add_finalizer(x)\nend\nx\n"}}],"instance_methods":[{"html_id":"initialize-instance-method","name":"initialize","abstract":false,"location":{"filename":"src/find.cr","line_number":4,"url":null},"def":{"name":"initialize","visibility":"Public","body":""}}]}]}]}})